#include <Arduino_GFX_Library.h>
#include <GfxUi.h>
#include <ConcertOne_Regular9pt7b.h>

// Define pins for ST7735
#define TFT_CS 16    // Chip Select
#define TFT_RST 2    // Reset
#define TFT_DC 4     // Data/Command
#define TFT_MOSI 23  // MOSI (Data)
#define TFT_SCK 18   // Clock

// Initialize Arduino_GFX
Arduino_DataBus *bus = new Arduino_ESP32SPI(TFT_DC, TFT_CS, TFT_SCK, TFT_MOSI);
Arduino_GFX *gfx = new Arduino_ST7735(bus, TFT_RST, 1 /* rotation */, false /* IPS */, 128 /* width */, 160 /* height */, 0 /* col offset */, 0 /* row offset */, 0, 0, false);

GfxUi gfxui(gfx);

float count = 0;

void setup() {
  Serial.begin(115200);

  gfx->begin();
  gfx->setFont(&ConcertOne_Regular9pt7b);
  gfx->setTextWrap(false);

  gfx->fillScreen(BLACK);
}

void loop() {
  gfx->fillScreen(gfx->color565(255, 0, 0));

  const uint16_t bitmap[] PROGMEM = {
    0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C,
    0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0xFFFF, 0xFFFF, 0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF, 0xFFFF, 0xFFFF, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C,
    0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0xFFFF, 0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF, 0xFFFF, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C,
    0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C,
    0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0xFFFF, 0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF, 0xFFFF, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C,
    0x680C, 0x680C, 0x680C, 0x680C, 0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF, 0x680C, 0x680C, 0x680C, 0x680C,
    0x680C, 0x680C, 0x680C, 0x680C, 0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF, 0x680C, 0x680C, 0x680C, 0x680C,
    0x680C, 0x680C, 0x680C, 0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF, 0x680C, 0x680C, 0x680C,
    0x680C, 0x680C, 0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF, 0x680C, 0x680C,
    0x680C, 0x680C, 0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF, 0x680C, 0x680C,
    0x680C, 0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF, 0x680C,
    0x680C, 0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF, 0x680C,
    0x680C, 0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF, 0x680C,
    0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF,
    0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF,
    0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF,
    0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF,
    0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF,
    0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF,
    0x680C, 0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF, 0x680C,
    0x680C, 0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF, 0x680C,
    0x680C, 0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF, 0x680C,
    0x680C, 0x680C, 0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF, 0x680C, 0x680C,
    0x680C, 0x680C, 0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF, 0x680C, 0x680C,
    0x680C, 0x680C, 0x680C, 0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF, 0x680C, 0x680C, 0x680C,
    0x680C, 0x680C, 0x680C, 0x680C, 0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF, 0x680C, 0x680C, 0x680C, 0x680C,
    0x680C, 0x680C, 0x680C, 0x680C, 0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF, 0x680C, 0x680C, 0x680C, 0x680C,
    0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0xFFFF, 0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF, 0xFFFF, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C,
    0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C,
    0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0xFFFF, 0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF, 0xFFFF, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C,
    0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0xFFFF, 0xFFFF, 0xFFFF, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0x5B7B, 0xFFFF, 0xFFFF, 0xFFFF, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C,
    0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C, 0x680C
  };

  // Draw text
  // gfx->setTextColor(0xFFFF);
  // gfx->setTextSize(0.5);
  // gfx->setCursor(30, 0);
  // gfx->println("0.5 " + String(count));

  // gfx->setTextColor(0xFFFF);
  // gfx->setTextSize(1);
  // gfx->setCursor(30, 30);
  // gfx->println("1 " + String(count));

  // gfx->setTextColor(0xFFFF);
  // gfx->setTextSize(2);
  // gfx->setCursor(30, 80);
  // gfx->println("2 " + String(count));

  // const char *text = "Hello, World!";

  // uint16_t textWidth = gfxui.getStringWidth(text);
  // uint16_t textHeight = gfxui.getStringHeight(text);

  // gfxui.drawTextCanva(CENTER, CENTER, 3, "Hello, World!", WHITE, WHITE);

  // gfxui.drawProgressBar(0, 0, 100, 20, count, 3, WHITE);

  Serial.println(count);

  int stepLimit = 10;

  gfxui.drawScrollBar(gfx->width() - 12, CENTER, 10, gfx->height() - 2, stepLimit, count, 3, WHITE);

  gfxui.drawBitmapX2(CENTER, CENTER, bitmap, 32, 32, TRANS);

  count++;
  if (count > stepLimit - 1) {
    count = 0;
  }
  delay(500);
}